{"version":3,"sources":["serviceWorker.js","phoneBookApp/services/apiMethod.js","phoneBookApp/Numbers.js","phoneBookApp/Person.js","phoneBookApp/PersonForm.js","phoneBookApp/Filter.js","phoneBookApp/Notification.js","phoneBookApp/Footer.js","phoneBookApp/AppPhoneBook.js","index.js"],"names":["Boolean","window","location","hostname","match","baseUrl","axios","get","newObject","post","id","put","delete","Numbers","person","number","refresh","type","onClick","phoneService","name","then","response","catch","error","status","console","log","statusCode","Person","props","className","row","PersonForm","onSubmit","addName","value","newName","onChange","handleNameChange","clearNameInput","newNumber","handleNumberChange","clearNumberInput","Filter","nameToSearch","handleNameSearchChange","test","Notfication","message","errorCSS","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","style","Footer","fontStyle","AppPhoneBook","useState","persons","setPersons","uuidv4","require","setNewName","setNewNumber","setNameToSearch","errorMessage","setErrorMessage","errorStatus","setErrorStatus","nameToShow","filter","toLowerCase","includes","useEffect","data","newNameSetAfterDelete","eachPerson","setTimeout","Notification","event","target","preventDefault","length","confirm","idToUpdate","updateObject","a","map","el","newNameObject","concat","alert","key","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCCjBAC,EAAU,+BAkBD,EAhBA,WACX,OAAOC,IAAMC,IAAIF,IAeN,EAZA,SAAAG,GACX,OAAOF,IAAMG,KAAKJ,EAAQG,IAWf,EARA,SAACE,EAAIF,GAChB,OAAOF,IAAMK,IAAN,UAAaN,EAAb,YAAwBK,GAAMF,IAO1B,EAJI,SAACE,EAAIF,GACpB,OAAOF,IAAMM,OAAN,UAAgBP,EAAhB,YAA2BK,KCqBvBG,EAlCC,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,OAAOC,EAAuB,EAAvBA,OAAOL,EAAgB,EAAhBA,GAAGM,EAAa,EAAbA,QAuB/B,OACI,oCACI,4BACKF,EADL,MACgBC,EADhB,UAC+BL,EAD/B,IAEI,4BAAQO,KAAK,SAASC,QA1Bf,WASfC,EACYT,EARS,CACjBU,KAAON,EACPC,OAASA,EACTL,GAAKA,IAKoBW,KAAK,SAAAC,GAE9BN,EAAQ,CAACF,aACVS,MAAM,SAAAC,GACL,GAAIA,EAAMF,SAASG,OAAS,IAAI,CAChCC,QAAQC,IAAIH,EAAMF,SAASG,QAC3B,IAAMG,EAAaJ,EAAMF,SAASG,OAClCT,EAAQ,CAACF,SAASc,oBASd,cCjBDC,EAXA,SAACC,GACZ,OACI,oCACI,wBAAIC,UAAU,UAAd,WACA,4BACKD,EAAME,OCaRC,EAlBI,SAACH,GAChB,OACI,oCACA,yCACA,0BAAMI,SAAUJ,EAAMK,SAClB,sCACU,2BAAOC,MAAON,EAAMO,QAASC,SAAUR,EAAMS,iBAAkBrB,QAASY,EAAMU,kBAExF,yCACa,2BAAOJ,MAAON,EAAMW,UAAWH,SAAUR,EAAMY,mBAAoBxB,QAASY,EAAMa,oBAG/F,4BAAQ1B,KAAK,UAAb,UCCG2B,EAbA,SAACd,GACZ,OACI,oCACI,0CACA,8BACI,6BACI,2BAAOM,MAAON,EAAMe,aAAcP,SAAUR,EAAMgB,uBAAwB5B,QAASY,EAAMiB,WCyB9FC,EA/BK,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,QAASxB,EAAW,EAAXA,OAC3B,GAAgB,OAAZwB,EACA,OAAO,KAGX,IAAIC,EAAW,CACbC,MAAO,MACPC,WAAY,YACZC,SAAU,GACVC,YAAa,QACbC,aAAc,EACdC,QAAS,GACTC,aAAc,IAYd,MATa,UAAXhC,EACFyB,EAASC,MAAQ,MAEG,YAAX1B,IACTyB,EAASC,MAAQ,SAMf,yBAAKO,MAAOR,GACTD,ICZIU,EAdA,WAOX,OACI,yBAAKD,MAPU,CACfP,MAAO,QACPS,UAAW,SACXP,SAAU,KAKN,6BACA,yE,4NCFZ,IA8IeQ,EA9IM,WAAO,IAAD,EAEOC,mBAAS,IAFhB,mBAEhBC,EAFgB,KAEPC,EAFO,KAGjBC,EAASC,EAAQ,IAHA,EAIOJ,mBAAS,mBAJhB,mBAIhBzB,EAJgB,KAIP8B,EAJO,OAKWL,mBAAS,qBALpB,mBAKhBrB,EALgB,KAKL2B,EALK,OAMiBN,mBAAS,IAN1B,mBAMhBjB,EANgB,KAMFwB,EANE,OAOiBP,mBAAS,MAP1B,mBAOhBQ,EAPgB,KAOFC,EAPE,OAQeT,mBAAS,SARxB,mBAQhBU,EARgB,KAQHC,EARG,KASjBC,EAAaX,EAAQY,OAAO,SAAA7D,GAAM,OAAIA,EAAOM,KAAKwD,cAAcC,SAAShC,EAAa+B,iBAE5FE,oBAAU,WACN3D,IAECE,KAAK,SAAAC,GACFI,QAAQC,IAAIL,EAASyD,MACrBf,EAAW1C,EAASyD,SAEzB,IAEH,IAAM/D,EAAU,SAAC,GAAyB,IAAxBF,EAAuB,EAAvBA,OAAOc,EAAgB,EAAhBA,WACrBF,QAAQC,IAAIC,GACZ,IAAMoD,EAAwBjB,EAAQY,OAAO,SAAAM,GAAU,OAAKA,EAAW7D,KAAKyD,SAAS/D,KACrFkD,EAAWgB,GACPpD,GAAc,KACdF,QAAQC,IAAI,4BACZ8C,EAAe,SACfF,EAAgB,gDAIhBE,EAAe,WACfF,EAAgB,GAAD,OAAIzD,EAAJ,iDAGnBoE,WAAW,WACPX,EAAgB,OACf,OA6FT,OACI,6BACI,kBAACY,EAAD,CAAclC,QAASqB,EAAc7C,OAAQ+C,IAC7C,kBAAC,EAAD,CAAQ3B,aAAcA,EAAcC,uBArEb,SAACsC,GAC5Bf,EAAgBe,EAAMC,OAAOjD,QAoE2DW,KAnF/E,SAACqC,GACV1D,QAAQC,IAAIoC,EAAQY,OAAO,SAAA7D,GAAM,OAAIA,EAAOM,KAAKyD,SAASO,EAAMC,OAAOjD,aAmFnE,kBAAC,EAAD,CAAYC,QAASA,EAASE,iBAhFb,SAAC6C,GACtBjB,EAAWiB,EAAMC,OAAOjD,QA+E8CI,eAdnD,SAAC4C,GACpBA,EAAME,iBACNnB,EAAW,KAaP1B,UAAWA,EAAWC,mBA5EH,SAAC0C,GACxBhB,EAAagB,EAAMC,OAAOjD,QA2EwCO,iBAV7C,SAACyC,GACtBA,EAAME,iBACNlB,EAAa,KAQyFjC,QAlE1F,SAACiD,GAIb,GAHAA,EAAME,iBACN5D,QAAQC,IAAIoC,EAAQY,OAAO,SAAA7D,GAAM,OAAIY,QAAQC,IAAIb,EAAOM,KAAMiB,KAAU,GAEpE0B,EAAQY,OAAO,SAAA7D,GAAM,OAAIA,EAAOM,OAASiB,IAASkD,OAAO,EAEzD,IAAsB,IADAtF,OAAOuF,QAAP,UAAkBnD,EAAlB,6FACM,CACxB,IAAMoD,EAAa1B,EAAQY,OAAO,SAAA7D,GAAM,OAAIA,EAAOM,KAAKyD,SAASxC,KACjEX,QAAQC,IAAI8D,EAAW,GAAG/E,IAC1B,IAAMgF,EAAe,CACjBhF,GAAI+E,EAAW,GAAG/E,GAClBU,KAAMiB,EACNtB,OAAQ0B,GAEZf,QAAQC,IAAIU,EAAQI,GACpBtB,EACQsE,EAAW,GAAG/E,GAAGgF,GACxBrE,KAAK,SAAAC,GACF,IAAMqE,EAAM5B,EAAQ6B,IAAI,SAAAC,GAAE,OAAIA,EAAGnF,KAAO+E,EAAW,GAAG/E,G,qVAAxB,IAAiCmF,EAAjC,CAAoC9E,OAAS0B,IAAaoD,IACxFnE,QAAQC,IAAIgE,GACZ3B,EAAW2B,UAIfpB,EAAgB,sCAEjB,GAAKlC,GAAYI,EAEjB,CACH,IAAMqD,EAAgB,CAClB1E,KAAOiB,EACPtB,OAAS0B,EACT/B,GAAKuD,KAGT9C,EACQ2E,GACPzE,KAAK,SAAAC,GACF0C,EAAWD,EAAQgC,OAAOD,IAC1B3B,EAAW,IACP7C,EAASG,QAAS,MAClB8C,EAAgB,GAAD,OAAIlC,EAAJ,gDAAmDI,IAClEgC,EAAe,WACfS,WAAW,WACPX,EAAgB,OACf,cAlBbtE,OAAO+F,MAAM,0CAwCb,kBAAC,EAAD,CAAQhE,IAhGE0C,EAAWkB,IAAI,SAAA9E,GAAM,OACnC,kBAAC,EAAD,CACImF,IAAOhC,IACPnD,OAAUA,EAAOM,KACjBL,OAAUD,EAAOC,OACjBL,GAAMI,EAAOJ,GACbM,QAAYA,QA2FZ,kBAAC,EAAD,QCxDZkF,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,STsCpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnF,KAAK,SAAAoF,GACjCA,EAAaC,iB","file":"static/js/main.39337a6d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/person'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseUrl,newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst deleteName = (id, newObject) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n} \r\n\r\nexport default {\r\n    getAll : getAll,\r\n    create : create,\r\n    update : update,\r\n    deleteName : deleteName\r\n}","import React from 'react'\r\nimport phoneService from './services/apiMethod'\r\n\r\nconst Numbers = ({person,number,id,refresh}) => {\r\n    const deleteName = () =>{\r\n        // window.confirm(`Delete ${person} ?`)\r\n        const nameToDelete = {\r\n            name : person,\r\n            number : number,\r\n            id : id,\r\n        }\r\n        // console.log(nameToDelete)\r\n        \r\n        phoneService\r\n        .deleteName(id,nameToDelete).then(response => {\r\n            // console.log(response)\r\n            refresh({person})\r\n        }).catch(error => {\r\n            if (error.response.status > 400){\r\n            console.log(error.response.status)\r\n            const statusCode = error.response.status\r\n            refresh({person , statusCode})\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <li>\r\n                {person} : {number} (id = {id})\r\n                <button type='button' onClick={deleteName}> delete</button>\r\n            </li>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Numbers","import React from 'react'\r\n\r\nconst Person = (props) => {\r\n    return (\r\n        <>\r\n            <h2 className='person'>Numbers</h2>\r\n            <ul>\r\n                {props.row}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n    return (\r\n        <>\r\n        <h2>add a new</h2>\r\n        <form onSubmit={props.addName}>\r\n            <div>\r\n                name: <input value={props.newName} onChange={props.handleNameChange} onClick={props.clearNameInput} />\r\n            </div>\r\n            <div>\r\n                number : <input value={props.newNumber} onChange={props.handleNumberChange} onClick={props.clearNumberInput} />\r\n            </div>\r\n\r\n            <button type='submit'>add</button>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    return(\r\n        <>\r\n            <h2>Phone book</h2>\r\n            <form>\r\n                <div>\r\n                    <input value={props.nameToSearch} onChange={props.handleNameSearchChange} onClick={props.test}/>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst Notfication = ({message, status}) =>{\r\n    if (message === null) {\r\n        return null\r\n      }\r\n\r\n    let errorCSS = {\r\n      color: 'red',\r\n      background: 'lightgrey',\r\n      fontSize: 20,\r\n      borderStyle: 'solid',\r\n      borderRadius: 5,\r\n      padding: 10,\r\n      marginBottom: 10,\r\n    }\r\n    \r\n    if (status === 'error'){\r\n      errorCSS.color = 'red'\r\n      // console.log(errorCSS)\r\n    } else if (status === 'success'){\r\n      errorCSS.color = 'green'\r\n      // console.log(errorCSS)\r\n    }\r\n    \r\n    \r\n      return (\r\n        <div style={errorCSS}>\r\n          {message}\r\n        </div>\r\n      )\r\n}\r\n\r\nexport default Notfication","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    const footerStyle ={\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Phone book app, Timothy Cumberland 2019</em>\r\n        </div>\r\n    )\r\n}\r\nexport default Footer","import React from 'react'\r\nimport { useState , useEffect } from 'react'\r\nimport Numbers from './Numbers'\r\nimport Person from './Person'\r\nimport PersonForm from './PersonForm'\r\nimport Filter from './Filter'\r\nimport phoneService from './services/apiMethod'\r\nimport Notification from './Notification'\r\nimport Footer from './Footer'\r\n\r\nconst AppPhoneBook = () => {\r\n\r\n    const [persons, setPersons] = useState([])\r\n    const uuidv4 = require('uuid/v4');\r\n    const [newName, setNewName] = useState('enter a name...')\r\n    const [newNumber, setNewNumber] = useState('enter a number...')\r\n    const [nameToSearch, setNameToSearch] = useState('')\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n    const [errorStatus, setErrorStatus] = useState('error')\r\n    const nameToShow = persons.filter(person => person.name.toLowerCase().includes(nameToSearch.toLowerCase()))\r\n\r\n    useEffect(()=>{\r\n        phoneService\r\n        .getAll()\r\n        .then(response => {\r\n            console.log(response.data)\r\n            setPersons(response.data)\r\n        })\r\n    }, [])\r\n\r\n    const refresh = ({person,statusCode}) => {\r\n        console.log(statusCode)\r\n        const newNameSetAfterDelete = persons.filter(eachPerson => !eachPerson.name.includes(person))\r\n        setPersons(newNameSetAfterDelete)\r\n        if (statusCode >= 400){\r\n            console.log('I am in the failed block')\r\n            setErrorStatus('error')\r\n            setErrorMessage('The person no longer exist in the database')\r\n        \r\n        } \r\n        else {\r\n            setErrorStatus('success')\r\n            setErrorMessage(`${person} was successfully deleted from the database`)\r\n            // setErrorMessage(`you fucked up Tim..`)\r\n        }\r\n        setTimeout(() => {\r\n            setErrorMessage(null)\r\n          }, 2500)\r\n    }\r\n\r\n    const row = () => nameToShow.map(person => \r\n        <Numbers\r\n            key = {uuidv4()}\r\n            person = {person.name}\r\n            number = {person.number}\r\n            id = {person.id}\r\n            refresh  = {refresh}\r\n        />\r\n    )\r\n\r\n    const test = (event) => {\r\n        console.log(persons.filter(person => person.name.includes(event.target.value)))\r\n    }\r\n\r\n    const handleNameChange = (event) => {\r\n        setNewName(event.target.value)\r\n        // console.log(event.target.value)\r\n    }\r\n\r\n    const handleNumberChange = (event) => {\r\n        setNewNumber(event.target.value)\r\n        // console.log(event.target.value)\r\n    }\r\n\r\n    const handleNameSearchChange = (event) => {\r\n        setNameToSearch(event.target.value)\r\n        // console.log(persons.filter(person => person.name.includes(event.target.value)))\r\n    }\r\n\r\n    const addName = (event) => {\r\n        event.preventDefault()\r\n        console.log(persons.filter(person => console.log(person.name, newName))>0)\r\n\r\n        if (persons.filter(person => person.name === newName).length>0) {\r\n            const confirmUpdate = window.confirm(`${newName} is already in the phonebook !!! Do you want to update the phone number for this person?`)\r\n            if (confirmUpdate === true) {\r\n                const idToUpdate = persons.filter(person => person.name.includes(newName))\r\n                console.log(idToUpdate[0].id)\r\n                const updateObject = {\r\n                    id: idToUpdate[0].id,\r\n                    name: newName,\r\n                    number: newNumber\r\n                }\r\n                console.log(newName,newNumber)\r\n                phoneService\r\n                .update(idToUpdate[0].id,updateObject)\r\n                .then(response =>{\r\n                    const a =   persons.map(el => el.id === idToUpdate[0].id ? {...el,number : newNumber} : el)\r\n                    console.log(a)\r\n                    setPersons(a)\r\n                    }\r\n                )\r\n            } else {\r\n                setErrorMessage('update operation cancelled...')\r\n            }\r\n        } else if (!newName || !newNumber) {\r\n            window.alert('please provide both name and number')\r\n        } else {\r\n            const newNameObject = {\r\n                name : newName,\r\n                number : newNumber,\r\n                id : uuidv4(),\r\n            }\r\n\r\n            phoneService\r\n            .create(newNameObject)\r\n            .then(response => {\r\n                setPersons(persons.concat(newNameObject))\r\n                setNewName('')\r\n                if (response.status <=299){\r\n                    setErrorMessage(`${newName} has been added with phone number of ${newNumber}`)\r\n                    setErrorStatus('success')\r\n                    setTimeout(() => {\r\n                        setErrorMessage(null)\r\n                      }, 2500)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const clearNameInput = (event) => {\r\n        event.preventDefault()\r\n        setNewName('')\r\n    }\r\n\r\n    const clearNumberInput = (event) =>{\r\n        event.preventDefault()\r\n        setNewNumber('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Notification message={errorMessage} status={errorStatus} />\r\n            <Filter nameToSearch={nameToSearch} handleNameSearchChange={handleNameSearchChange} test={test}/>\r\n            <PersonForm newName={newName} handleNameChange={handleNameChange} clearNameInput={clearNameInput} \r\n            newNumber={newNumber} handleNumberChange={handleNumberChange} clearNumberInput={clearNumberInput} addName={addName}/>\r\n            <Person row={row()} /> \r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppPhoneBook","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './courseApp/App';\nimport * as serviceWorker from './serviceWorker';\nimport AppNotes from './noteApp/AppNotes';\nimport AppPhoneBook from './phoneBookApp/AppPhoneBook'\nimport axios from 'axios'\nimport Country from './countryApp/Country'\n\nconst courses = \n[\n    {\n        name: 'Half Stack application development',\n        id: 1,\n        parts: [\n          {\n            name: 'Fundamentals of React',\n            exercises: 10,\n            id: 1\n          },\n          {\n            name: 'Using props to pass data',\n            exercises: 7,\n            id: 2\n          },\n          {\n            name: 'State of a component',\n            exercises: 14,\n            id: 3\n          },\n          {\n            name: 'Redux',\n            exercises: 11,\n            id: 4\n          }\n        ]\n      }, \n      {\n        name: 'Node.js',\n        id: 2,\n        parts: [\n          {\n            name: 'Routing',\n            exercises: 3,\n            id: 1\n          },\n          {\n            name: 'Middlewares',\n            exercises: 7,\n            id: 2\n          }\n        ]\n      }\n]\n\nconst notes_OLD = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only Javascript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]\n\n\n// course App \n// ReactDOM.render(<App course={courses}/>, document.getElementById('root'));\n\n\n// coutry API\n// const promise = axios.get('https://restcountries.eu/rest/v2/all').then( response => {\n//   // console.log(response)\n//   const country = response.data\n//   console.log(country)\n//   ReactDOM.render(<Country country={country} />, document.getElementById('root'));\n// })\n\n//phone book\nReactDOM.render(<AppPhoneBook />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}